name: Anchore Enterprise with anchorectl


on:
  ### UNCOMMENT THIS SECTION TO AUTOBUILD ON ANY PUSH
  #push:
  #  branches:
  #    - main
  ### UNCOMMENT THIS SECTION TO BUILD ON A REGULAR SCHEDULE
  #schedule:
  #  - cron: '38 23 */14 * *'
  ### UNCOMMENT THIS SECTION TO ENABLE ON-DEMAND BUILDS
  workflow_dispatch:
    inputs:
      mode:
        description: 'On-Demand Build'  
     
jobs:


  Build-Scan:
    runs-on: ubuntu-latest
    env:
      ANCHORECTL_URL: ${{ vars.ANCHORECTL_URL }}
      ANCHORECTL_USERNAME: ${{ vars.ANCHORECTL_USERNAME }}
      ANCHORECTL_PASSWORD: ${{ secrets.ANCHORECTL_PASSWORD }}
      ## set ANCHORECTL_FAIL_BASED_ON_RESULTS to true if you want to break the pipeline based on the evaluation
      ANCHORECTL_FAIL_BASED_ON_RESULTS: false
      REGISTRY: ghcr.io




    steps:
    
    - name: "Set IMAGE environmental variables"
      run: |
        echo "IMAGE=${REGISTRY}/${GITHUB_REPOSITORY}:${GITHUB_REF_NAME}" >> $GITHUB_ENV
        
    - name: Checkout Code
      uses: actions/checkout@v3
      
    - name: Log in to the Container registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}      
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2


    ### note that if you want to scan locally, then push the SBOM to
    ### anchore enterprise, you can set "push: false" so the image stays local
    ### 
    - name: build local container
      uses: docker/build-push-action@v4
      with:
        tags: ${{ env.IMAGE }}
        push: true

    - name: Install anchorectl Binary
      run: |
        curl -sSfL https://anchorectl-releases.anchore.io/anchorectl/install.sh | sh -s -- -b ${HOME}/.local/bin v1.6.0
        export PATH="${HOME}/.local/bin/:${PATH}"
    
    ### for debugging, you can uncomment this to check for connectivity to the Anchore 
    ### Enterprise deployment
    #- name: Verify Anchore Ready and Reachable
    #  run: |
    #    anchorectl system status 
    
    ### This is the standard method of scanning (known as "centralized" scanning), anchorectl
    ### hits the Anchore Enterprise API, adds ${IMAGE} to the queue to be scanned, and in this case
    ### waits for analysis to complete.  In this case, the Analyzer service in the Anchore Enterprise
    ### deplolyment will pull ${IMAGE} and do the SBOM creation.
    - name: Queue Image for Scanning by Anchore Enterprise
      run: |        
       anchorectl image add --no-auto-subscribe --wait ${IMAGE} 
       ### if desired, you could pass the dockerfile:
       ### anchorectl image add --no-auto-subscribe --wait --force --dockerfile ./Dockerfile ${IMAGE}
        
    ### ALTERNATE
    ### if you want to scan locally (also known as "distributed" scanning), use this instead
    ### "--from docker" tells anchorectl to use the local image, generate the sbom itself, and then
    ### push the SBOM to the Anchore Enterprise API.  In this case, the actual image is never pulled
    ### by the Anchore Enterprise deployment.  It never needs to be pushed anywhere in this case.
    ### There is also a "--from registry" option, this tells anchorectl to pull the image from the
    ### registry (rather than the the Anchore Enterprise backend analyzer pulling the image) and
    ### create the SBOM locally and push the SBOM to the API.
    #- name: Generate SBOM and Push to Anchore
    #  run: |        
    #    anchorectl image add --no-auto-subscribe --from docker --wait ${IMAGE}
        
    - name: Pull Vulnerability List
      run: |
        anchorectl image vulnerabilities ${IMAGE} 
        
    - name: Pull Policy Evaluation
      run: |
        # set "ANCHORECTL_FAIL_BASED_ON_RESULTS=true" (see above in the "env:" section) to break the pipeline here if the 
        # policy evaluation returns FAIL or add -f, --fail-based-on-results to this command for the same result
        #
        anchorectl image check --detail ${IMAGE}
